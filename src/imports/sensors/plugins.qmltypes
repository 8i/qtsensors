import QtQuick.tooling 1.1

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated with the command 'qmlplugindump QtMobility.sensors 1.3 /home/lramsay/build/qt50/qtbase/imports'.

Module {
    Component {
        name: "QAccelerometer"
        prototype: "QSensor"
        exports: [
            "Accelerometer 1.1",
            "Accelerometer 1.2",
            "Accelerometer 1.3"
        ]
    }
    Component {
        name: "QAccelerometerReading"
        prototype: "QSensorReading"
        exports: [
            "AccelerometerReading 1.1",
            "AccelerometerReading 1.2",
            "AccelerometerReading 1.3"
        ]
        Property { name: "x"; type: "double"; isReadonly: true }
        Property { name: "y"; type: "double"; isReadonly: true }
        Property { name: "z"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QAmbientLightReading"
        prototype: "QSensorReading"
        exports: [
            "AmbientLightReading 1.1",
            "AmbientLightReading 1.2",
            "AmbientLightReading 1.3"
        ]
        Enum {
            name: "LightLevel"
            values: {
                "Undefined": 0,
                "Dark": 1,
                "Twilight": 2,
                "Light": 3,
                "Bright": 4,
                "Sunny": 5
            }
        }
        Property { name: "lightLevel"; type: "LightLevel"; isReadonly: true }
    }
    Component {
        name: "QAmbientLightSensor"
        prototype: "QSensor"
        exports: [
            "AmbientLightSensor 1.1",
            "AmbientLightSensor 1.2",
            "AmbientLightSensor 1.3"
        ]
    }
    Component {
        name: "QCompass"
        prototype: "QSensor"
        exports: ["Compass 1.1", "Compass 1.2", "Compass 1.3"]
    }
    Component {
        name: "QCompassReading"
        prototype: "QSensorReading"
        exports: [
            "CompassReading 1.1",
            "CompassReading 1.2",
            "CompassReading 1.3"
        ]
        Property { name: "azimuth"; type: "double"; isReadonly: true }
        Property { name: "calibrationLevel"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QGyroscope"
        prototype: "QSensor"
        exports: ["Gyroscope 1.2", "Gyroscope 1.3"]
    }
    Component {
        name: "QGyroscopeReading"
        prototype: "QSensorReading"
        exports: ["GyroscopeReading 1.2", "GyroscopeReading 1.3"]
        Property { name: "x"; type: "double"; isReadonly: true }
        Property { name: "y"; type: "double"; isReadonly: true }
        Property { name: "z"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QIRProximityReading"
        prototype: "QSensorReading"
        exports: ["IRProximityReading 1.3"]
        Property { name: "reflectance"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QIRProximitySensor"
        prototype: "QSensor"
        exports: ["IRProximitySensor 1.3"]
    }
    Component {
        name: "QLightReading"
        prototype: "QSensorReading"
        exports: ["LightReading 1.2", "LightReading 1.3"]
        Property { name: "lux"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QLightSensor"
        prototype: "QSensor"
        exports: ["LightSensor 1.2", "LightSensor 1.3"]
    }
    Component {
        name: "QMagnetometer"
        prototype: "QSensor"
        exports: ["Magnetometer 1.1", "Magnetometer 1.2", "Magnetometer 1.3"]
    }
    Component {
        name: "QMagnetometerReading"
        prototype: "QSensorReading"
        exports: [
            "MagnetometerReading 1.1",
            "MagnetometerReading 1.2",
            "MagnetometerReading 1.3"
        ]
        Property { name: "x"; type: "double"; isReadonly: true }
        Property { name: "y"; type: "double"; isReadonly: true }
        Property { name: "z"; type: "double"; isReadonly: true }
        Property { name: "calibrationLevel"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QOrientationReading"
        prototype: "QSensorReading"
        exports: [
            "OrientationReading 1.1",
            "OrientationReading 1.2",
            "OrientationReading 1.3"
        ]
        Enum {
            name: "Orientation"
            values: {
                "Undefined": 0,
                "TopUp": 1,
                "TopDown": 2,
                "LeftUp": 3,
                "RightUp": 4,
                "FaceUp": 5,
                "FaceDown": 6
            }
        }
        Property { name: "orientation"; type: "Orientation"; isReadonly: true }
    }
    Component {
        name: "QOrientationSensor"
        prototype: "QSensor"
        exports: [
            "OrientationSensor 1.1",
            "OrientationSensor 1.2",
            "OrientationSensor 1.3"
        ]
    }
    Component {
        name: "QProximityReading"
        prototype: "QSensorReading"
        exports: [
            "ProximityReading 1.1",
            "ProximityReading 1.2",
            "ProximityReading 1.3"
        ]
        Property { name: "close"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "QProximitySensor"
        prototype: "QSensor"
        exports: [
            "ProximitySensor 1.1",
            "ProximitySensor 1.2",
            "ProximitySensor 1.3"
        ]
    }
    Component {
        name: "QRotationReading"
        prototype: "QSensorReading"
        exports: [
            "RotationReading 1.1",
            "RotationReading 1.2",
            "RotationReading 1.3"
        ]
        Property { name: "x"; type: "double"; isReadonly: true }
        Property { name: "y"; type: "double"; isReadonly: true }
        Property { name: "z"; type: "double"; isReadonly: true }
    }
    Component {
        name: "QRotationSensor"
        prototype: "QSensor"
        exports: [
            "RotationSensor 1.1",
            "RotationSensor 1.2",
            "RotationSensor 1.3"
        ]
    }
    Component {
        name: "QSensor"
        prototype: "QObject"
        exports: ["Sensor 1.2", "Sensor 1.3"]
        exportMetaObjectRevisions: [0, 1]
        Enum {
            name: "Feature"
            values: {
                "Buffering": 0,
                "AlwaysOn": 1,
                "GeoValues": 2,
                "FieldOfView": 3,
                "Reserved": 257
            }
        }
        Property { name: "sensorid"; type: "QByteArray" }
        Property { name: "type"; type: "QByteArray"; isReadonly: true }
        Property { name: "connectedToBackend"; type: "bool"; isReadonly: true }
        Property { name: "availableDataRates"; type: "qrangelist"; isReadonly: true }
        Property { name: "dataRate"; type: "int" }
        Property { name: "reading"; type: "QSensorReading"; isReadonly: true; isPointer: true }
        Property { name: "busy"; type: "bool"; isReadonly: true }
        Property { name: "active"; type: "bool" }
        Property { name: "outputRanges"; type: "qoutputrangelist"; isReadonly: true }
        Property { name: "outputRange"; type: "int" }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "error"; type: "int"; isReadonly: true }
        Property { name: "alwaysOn"; revision: 1; type: "bool" }
        Signal { name: "busyChanged"; type: "void" }
        Signal { name: "activeChanged"; type: "void" }
        Signal { name: "readingChanged"; type: "void" }
        Signal {
            name: "sensorError"
            type: "void"
            Parameter { name: "error"; type: "int" }
        }
        Signal { name: "availableSensorsChanged"; type: "void" }
        Signal { name: "alwaysOnChanged"; type: "void" }
        Method { name: "start"; type: "bool" }
        Method { name: "stop"; type: "void" }
        Method { name: "connectToBackend"; type: "bool" }
        Method {
            name: "isFeatureSupported"
            type: "bool"
            Parameter { name: "feature"; type: "Feature" }
        }
    }
    Component {
        name: "QSensorReading"
        prototype: "QObject"
        exports: [
            "SensorReading 1.1",
            "SensorReading 1.2",
            "SensorReading 1.3"
        ]
        Property { name: "timestamp"; type: "qulonglong"; isReadonly: true }
    }
    Component {
        name: "QTapReading"
        prototype: "QSensorReading"
        exports: ["TapReading 1.1", "TapReading 1.2", "TapReading 1.3"]
        Enum {
            name: "TapDirection"
            values: {
                "Undefined": 0,
                "X": 1,
                "Y": 2,
                "Z": 4,
                "X_Pos": 17,
                "Y_Pos": 34,
                "Z_Pos": 68,
                "X_Neg": 257,
                "Y_Neg": 514,
                "Z_Neg": 1028,
                "X_Both": 273,
                "Y_Both": 546,
                "Z_Both": 1092
            }
        }
        Property { name: "tapDirection"; type: "TapDirection"; isReadonly: true }
        Property { name: "doubleTap"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "QTapSensor"
        prototype: "QSensor"
        exports: ["TapSensor 1.1", "TapSensor 1.2", "TapSensor 1.3"]
    }
}
